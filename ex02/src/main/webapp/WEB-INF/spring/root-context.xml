<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="book_ex" />
		<property name="password" value="book_ex" />	
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>	
	
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<mybatis-spring:scan base-package="org.zerock.mapper"/>
	<context:component-scan base-package="org.zerock.service"></context:component-scan>
	<context:component-scan base-package="org.zerock.quartz.service"></context:component-scan>
	<context:component-scan base-package="org.zerock.task"></context:component-scan>		<!-- 잘못 업로드된 파일 삭제 (Quartz) -->
	
	<context:annotation-config></context:annotation-config>
	
	<!-- 트랜젝션 매니저 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- @Transactional 애노테이션을 sacn하기 위한 설정 -->
	<tx:annotation-driven/>
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- 
		 크론 표현식에서는 6~7 자리 가 사용됨.
		 
		 cron = "* * * * * *"
	
		 *        *        *        *        *        *        *
		 초       	    분                시              일                월              요일            년도(생략가능)
	
	        여기서 요일은 1-7, SUN-SAT 로 표현 가능.
		(1:일, 2:월, 3:화, 4:수, 5:목, 6:금, 7:토 입니다.)
	
	         위의 예에서 *(아스타)는 ALL(모든) 것을 의미 함.
		
		# 그 밖에 
		
		?(물음표) : 특정값이 없을 때(어떤값이든 상관X), 날짜와 요일에만 사용가능
		
		-(하이픈) : 범위값을 지정할 때
		
		,(콤마) : 여러 값을 지정할 때
		
		/(슬러시) : 초기값과 증가치 설정할 때
		
		L(대문자 엘) : 지정할 수 있는 범위의 마지막 값 설정할 때, 날짜와 요일에만 사용가능
		
		W(대문자 더블유) : 월~금요일 또는 가장 가까운 월,금요일을 설정할 때
		
		#(샵) : 몇번째 특정요일을 설정할 때
	-->
		
	<!-- 테스트용 Job  -->
	<bean id="testJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 넣어 줍니다. -->
		<property name="targetObject" ref="scheduleService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메서드를 지정합니다. -->
		<property name="targetMethod" value="testJobMethod" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="false" />
	</bean>
	
	<!-- 테스트용 Trigger -->
	<bean id="testJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="testJob" />
		<!-- CronTrigger를 사용하여 매일 1시에 실행되도록 지정 -->
		<property name="cronExpression" value="0 0 1 * * ?" />
	</bean>	
	
	<!-- 테스트용 Job2  -->
	<bean id="testJob2" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 넣어 줍니다. -->
		<property name="targetObject" ref="scheduleService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메서드를 지정합니다. -->
		<property name="targetMethod" value="testInsertJobMethod" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="false" />
	</bean>
	
	<!-- 테스트용 Trigger2 -->
	<bean id="testJobTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="testJob2" />
		<!-- CronTrigger를 사용하여 매일 4시 18분에 실행되도록 지정 -->
		<property name="cronExpression" value="0 18 16 * * ?" />
	</bean>
	
	<!-- 테스트용 Scheduler2 -->
	<bean id="testJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="testJobTrigger" />
				<ref bean="testJobTrigger2" />
			</list>
		</property>
	</bean>
	
	
	<!-- 잘못 업로드된 파일 삭제 (Quartz)-->
	
	<task:annotation-driven/>
	

</beans>